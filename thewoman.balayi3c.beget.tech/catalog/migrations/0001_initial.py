# Generated by Django 4.2.1 on 2023-11-05 10:20

import catalog.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sessions', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Advertisement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Реклама', max_length=200, verbose_name='Название рекламы')),
                ('add', models.ImageField(upload_to='', verbose_name='Изображение релкамы')),
                ('is_active', models.BooleanField(verbose_name='Отображать рекламу')),
                ('url_add', models.URLField(default='example.com', verbose_name='Ссылка на событие')),
            ],
            options={
                'verbose_name_plural': 'Реклама',
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Корзина',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название категории')),
            ],
            options={
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Цвет')),
            ],
            options={
                'verbose_name_plural': 'Цвета',
            },
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('source_path', models.CharField(max_length=200)),
                ('target_path', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Папки (не трогать!)',
            },
        ),
        migrations.CreateModel(
            name='NameOfClothe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название типа товара')),
            ],
            options={
                'verbose_name_plural': 'Название товара',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=100, verbose_name='Фамилия')),
                ('email', models.EmailField(max_length=254, verbose_name='Эл. почта')),
                ('phone_number', models.CharField(max_length=20, verbose_name='Номер телефона')),
                ('address', models.TextField(max_length=200, verbose_name='Адрес')),
                ('product_name', models.CharField(max_length=1000, verbose_name='Название товара')),
                ('product_size', models.CharField(default='', max_length=1000, verbose_name='Размера чашки')),
                ('product_quantity', models.CharField(max_length=2000, verbose_name='Количество товара')),
                ('product_num_in_packet', models.PositiveIntegerField(default=1, verbose_name='Количество товара в упаковке')),
                ('product_article', models.CharField(max_length=2000, verbose_name='Артикул товара')),
                ('product_comment_size', models.CharField(default='None', max_length=100, verbose_name='Размер товара поштучно')),
                ('created_at', models.DateTimeField(null=True, verbose_name='Время создания заказа')),
                ('product_price_total', models.PositiveIntegerField(default=100, verbose_name='Общая сумма заказа')),
                ('product_img', models.CharField(max_length=2000, null=True, verbose_name='Изображение товара')),
                ('product_price_for_one', models.CharField(max_length=30, null=True, verbose_name='Цена за упаковку')),
                ('admin_email_address', models.EmailField(default='sales@optombelie.ru', max_length=254, verbose_name='Эл. почта магазина')),
            ],
            options={
                'verbose_name_plural': 'Заказы (в заказах ничего не менять)',
            },
        ),
        migrations.CreateModel(
            name='Secondary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название типа товара')),
            ],
            options={
                'verbose_name_plural': 'Тип второй товара (если комплект)',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название типа товара')),
            ],
            options={
                'verbose_name_plural': 'Тип товара',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Название товара')),
                ('slug', models.SlugField(blank=True, max_length=100, verbose_name='URL (не менять)')),
                ('article', models.CharField(max_length=30, verbose_name='Артикул')),
                ('description', models.TextField(verbose_name='Описание товара')),
                ('is_one_to_one', models.BooleanField(default=False, verbose_name='Возможность купить товар поштучно (поставить галочку, если можно купить товар поштучно')),
                ('mainimage', models.ImageField(upload_to=catalog.models.generate_unique_folder_name, verbose_name='Главное изображение')),
                ('color_image1', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для главной страницы')),
                ('color_image2', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для главной страницы')),
                ('color_image3', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для главной страницы')),
                ('color_image4', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для главной страницы')),
                ('color_image5', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для главной страницы')),
                ('color_image6', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для главной страницы')),
                ('color_image7', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для главной страницы')),
                ('color_image8', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для главной страницы')),
                ('color_image9', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для главной страницы')),
                ('color_image10', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для главной страницы')),
                ('image1', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для страницы с товаром')),
                ('image2', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для страницы с товаром')),
                ('image3', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для страницы с товаром')),
                ('image4', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для страницы с товаром')),
                ('image5', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для страницы с товаром')),
                ('image6', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для страницы с товаром')),
                ('image7', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для страницы с товаром')),
                ('image8', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для страницы с товаром')),
                ('image9', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для страницы с товаром')),
                ('image10', models.ImageField(blank=True, upload_to=catalog.models.generate_unique_folder_name, verbose_name='Изображение для страницы с товаром')),
                ('price', models.DecimalField(decimal_places=0, max_digits=10, verbose_name='Цена товара (если есть скидка, то указать с учетом скидки)')),
                ('num_of_colors', models.PositiveIntegerField(default=1, verbose_name='Количество цветов у товара')),
                ('num_of_products_in_packet', models.PositiveIntegerField(default=1, verbose_name='Количество товара в упаковке')),
                ('is_set', models.BooleanField(default=False, verbose_name='Комплект')),
                ('size_70', models.CharField(default='70', max_length=15, verbose_name='Название размера в первой ячейке (верхняя часть комплекта или, если не комплект, то просто размер одежды)')),
                ('size_75', models.CharField(blank=True, default='75', max_length=15, verbose_name='Название размера во второй ячейке (верхняя часть комплекта или, если не комплект, то просто размер одежды)')),
                ('size_80', models.CharField(blank=True, default='80', max_length=15, verbose_name='Название размера в третьй ячейке (верхняя часть комплекта или, если не комплект, то просто размер одежды)')),
                ('size_85', models.CharField(blank=True, default='85', max_length=15, verbose_name='Название размера в четвертой ячейке (верхняя часть комплекта или, если не комплект, то просто размер одежды)')),
                ('size_90', models.CharField(blank=True, default='90', max_length=15, verbose_name='Название размера в пятой ячейке (верхняя часть комплекта или, если не комплект, то просто размер одежды)')),
                ('num_of_size_70', models.PositiveIntegerField(default=1, verbose_name='Количество товара в упаковке (1-я ячейка/вехняя часть комплекта или, если не комплект, то просто размер одежды)')),
                ('num_of_size_75', models.PositiveIntegerField(default=1, verbose_name='Количество товара в упаковке (2-я ячейка/вехняя часть комплекта или, если не комплект, то просто размер одежды)')),
                ('num_of_size_80', models.PositiveIntegerField(default=1, verbose_name='Количество товара в упаковке (3-я ячейка/вехняя часть комплекта или, если не комплект, то просто размер одежды)')),
                ('num_of_size_85', models.PositiveIntegerField(default=1, verbose_name='Количество товара в упаковке (4-я ячейка/вехняя часть комплекта или, если не комплект, то просто размер одежды)')),
                ('num_of_size_90', models.PositiveIntegerField(default=1, verbose_name='Количество товара в упаковке (5-я ячейка/вехняя часть комплекта или, если не комплект, то просто размер одежды)')),
                ('size_xs', models.CharField(blank=True, default='XS', max_length=15, verbose_name='Название размера в первой ячейке (нижняя часть комплекта)')),
                ('size_s', models.CharField(blank=True, default='S', max_length=15, verbose_name='Название размера во второй ячейке (нижняя часть комплекта)')),
                ('size_m', models.CharField(blank=True, default='M', max_length=15, verbose_name='Название размера в третьй ячейке (нижняя часть комплекта)')),
                ('size_l', models.CharField(blank=True, default='L', max_length=15, verbose_name='Название размера в четвертой ячейке (нижняя часть комплекта)')),
                ('size_xl', models.CharField(blank=True, default='XL', max_length=15, verbose_name='Название размера в пятой ячейке (нижняя часть комплекта)')),
                ('num_of_size_xs', models.PositiveIntegerField(default=1, verbose_name='Количество товара в упаковке (1-я ячейка/нижняя часть комплекта)')),
                ('num_of_size_s', models.PositiveIntegerField(default=1, verbose_name='Количество товара в упаковке (2-я ячейка/нижняя часть комплекта)')),
                ('num_of_size_m', models.PositiveIntegerField(default=1, verbose_name='Количество товара в упаковке (3-я ячейка/нижняя часть комплекта)')),
                ('num_of_size_l', models.PositiveIntegerField(default=1, verbose_name='Количество товара в упаковке (4-я ячейка/нижняя часть комплекта)')),
                ('num_of_size_xl', models.PositiveIntegerField(default=1, verbose_name='Количество товара в упаковке (5-я ячейка/нижняя часть комплекта)')),
                ('color', models.CharField(choices=[('Белый', 'White'), ('Бело-красный', 'White-Red'), ('Бело-розовый', 'White-Rose'), ('Бордовый', 'Vinous'), ('Голубой', 'Blue-W'), ('Капучино', 'Coffee'), ('Красный', 'Red'), ('Леопард', 'Leopard'), ('Молочный', 'Milk'), ('Розовый', 'Rose'), ('Синий', 'Blue'), ('Черный', 'Black'), ('Шампань', 'Champagne'), ('Черно-розовый', 'Black-and-Pink'), ('Черно-красный', 'Black-and-Red'), ('Черно-золотой', 'Black-and-Gold'), ('Черно-белый', 'Black-and-White'), ('Черно-бежевый', 'Black-and-Beige'), ('Фуксия', 'Fuchsia'), ('Фиолетовый', 'Purple'), ('Темно-зеленый', 'Dark-Green'), ('Телесный', 'Flesh'), ('Слива', 'Plum'), ('Сине-бежевый', 'Blue-and-Beige'), ('Серый', 'Gray'), ('Салатовый', 'Salad'), ('Розы', 'Rose-flowers'), ('Пудра', 'Powder'), ('Персик', 'Peach'), ('Пенка', 'Foam'), ('Оранжевый', 'Orange'), ('Оливковый', 'Olive'), ('Нефрит', 'Jade'), ('Мята', 'Mint'), ('Красно-бежевый', 'Red-and-Beige'), ('Кофе', 'Coffee-ex'), ('Изумрудный', 'Emerald'), ('Желтый', 'Yellow'), ('Джинсовый', 'Denim'), ('Бордово-бежевый', 'Burgundy-beige'), ('Бело-бежевый', 'White-and-beige'), ('Бежевый', 'Beige'), ('Бежево-розовый', 'Beige-and-Rose'), ('Пастель', 'Pastel'), ('Принт', 'Print'), ('Терракот', 'Terracot'), ('Хаки', 'Khaki'), ('Темно-серый', 'Dark-gray'), ('Графит', 'Graphite'), ('Принт кофе', 'Print-coffee'), ('Принт зеленый', 'Pring-green'), ('Серо-белый', 'Gray-white'), ('Бежевый леопард', 'Beige-leopard'), ('Серый леопард', 'Gray-leopard'), ('Карамель', 'Caramel'), ('Стразы', 'Srtaz'), ('Сердца', 'Hearts'), ('Дождь', 'Rain'), ('Крылья', 'Wings'), ('Корона', 'Crown'), ('Алмаз', 'Diamond'), ('Пчела', 'Bee'), ('Глаз', 'Eye'), ('Стрекоза', 'Dragonfly'), ('Очки', 'Glasses'), ('Бирюзовый', 'Turquoise'), ('Ярко-розовый', 'Bright-pink')], default='Черный', max_length=50, verbose_name='Выберите основной цвет товара')),
                ('size', models.CharField(blank=True, choices=[('NoneSize', 'NoneSize'), ('A', 'A'), ('B', 'B'), ('B,C', 'B,C'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F')], default='NoneSize', max_length=15, verbose_name='Размер чашки')),
                ('is_in_stock_key', models.CharField(choices=[('Есть в наличии', 'Есть в наличии'), ('Нет в наличии', 'Нет в наличии')], default='Есть в наличии', max_length=50, verbose_name='Наличие')),
                ('is_in_new_key', models.CharField(choices=[('Новинка', 'Новинка'), ('Не новинка', 'Не новинка')], default='Новинка', max_length=30, verbose_name='Новинка')),
                ('is_sale', models.CharField(choices=[('Скидка', 'Скидка'), ('Нет скидки', 'Нет скидки')], default='Нет скидки', max_length=30, verbose_name='Скидка')),
                ('sale_price', models.DecimalField(decimal_places=0, default=0, max_digits=10, verbose_name='Если товар продается по скидке, то указать старую цену')),
                ('last_in_stock_change', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время последнего редактирования товара (не менять)')),
                ('is_first', models.IntegerField(default=0, verbose_name='Приоритет')),
                ('slug_helper', models.CharField(default='Пусто', max_length=10)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.category', verbose_name='Категория товара из Каталога')),
                ('color_exist', models.ManyToManyField(to='catalog.color', verbose_name='Выберите цвета, которые есть у этого товара')),
                ('name_of_clothe', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.nameofclothe', verbose_name='Название типа одежды (все пункты с таким названием должны совпадать, кроме того случая, когда это комплект), если товар-комплект, то выбрать "Комплект"')),
                ('secondary', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.secondary', verbose_name='Название типа одежды-2 (можно оставить пустым, если это не комплект), если товар-комплект, то выбрать название нижней части одежды')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.type', verbose_name='Название типа одежды (все пункты с таким названием должны совпадать, кроме того случая, когда это комплект), если товар-комплект, то выбрать название верхней части одежды')),
            ],
            options={
                'verbose_name_plural': 'Нижнее белье',
                'ordering': ['-is_first', '-last_in_stock_change', 'category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(default='Черный', max_length=50, verbose_name='Цвет товара')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Количество товара с таким цветом')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='catalog.product', verbose_name='Название товара')),
            ],
            options={
                'verbose_name_plural': 'Цвета товара (количество)',
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('size', models.CharField(default=' ', max_length=100)),
                ('session_id', models.CharField(max_length=32)),
                ('color', models.CharField(max_length=255)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.product')),
            ],
            options={
                'verbose_name_plural': 'Товары в корзине',
            },
        ),
        migrations.AddField(
            model_name='cart',
            name='products',
            field=models.ManyToManyField(through='catalog.CartItem', to='catalog.product'),
        ),
        migrations.AddField(
            model_name='cart',
            name='session',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sessions.session'),
        ),
    ]
